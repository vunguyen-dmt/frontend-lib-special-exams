{"version":3,"file":"index.js","names":["Instructions","children","state","useContext","ExamStateContext","exam","attempt","examType","type","prerequisitesData","prerequisite_status","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","prerequisitesPassed","are_prerequisites_satisifed","attemptStatus","attempt_status","attemptReadyToResume","attempt_ready_to_resume","useState","skipProctoring","toggleSkipProctoring","toggleSkipProctoredExam","expired","shouldRenderExpiredPage","renderEmptyAttemptInstructions","component","ExamType","PROCTORED","isEmpty","attempt_id","ExamStatus","CREATED","DOWNLOAD_SOFTWARE_CLICKED","READY_TO_START","READY_TO_SUBMIT","SUBMITTED","TIMED","SECOND_REVIEW_REQUIRED","VERIFIED","REJECTED","ERROR","IS_ONBOARDING_ERROR","STARTED","propTypes","PropTypes","element","isRequired"],"sources":["../../src/instructions/index.jsx"],"sourcesContent":["import React, { useContext, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  DownloadSoftwareProctoredExamInstructions,\n  ReadyToStartProctoredExamInstructions,\n  PrerequisitesProctoredExamInstructions,\n  SkipProctoredExamInstruction,\n  OnboardingErrorProctoredExamInstructions,\n} from './proctored_exam';\nimport { isEmpty, shouldRenderExpiredPage } from '../helpers';\nimport {\n  ExamStatus,\n  ExamType,\n  IS_ONBOARDING_ERROR,\n} from '../constants';\nimport ExamStateContext from '../context';\nimport EntranceExamInstructions from './EntranceInstructions';\nimport SubmitExamInstructions from './SubmitInstructions';\nimport RejectedInstructions from './RejectedInstructions';\nimport ErrorExamInstructions from './ErrorInstructions';\nimport SubmittedExamInstructions from './SubmittedInstructions';\nimport VerifiedExamInstructions from './VerifiedInstructions';\nimport ExpiredInstructions from './ExpiredInstructions';\nimport UnknownAttemptStatusError from './UnknownAttemptStatusError';\n\nconst Instructions = ({ children }) => {\n  const state = useContext(ExamStateContext);\n  const { exam } = state;\n  const {\n    attempt,\n    type: examType,\n    prerequisite_status: prerequisitesData,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const prerequisitesPassed = prerequisitesData ? prerequisitesData.are_prerequisites_satisifed : true;\n  const {\n    attempt_status: attemptStatus,\n    attempt_ready_to_resume: attemptReadyToResume,\n  } = attempt || {};\n  const [skipProctoring, toggleSkipProctoring] = useState(false);\n  const toggleSkipProctoredExam = () => toggleSkipProctoring(!skipProctoring);\n  const expired = shouldRenderExpiredPage(exam);\n\n  if (expired) {\n    return <ExpiredInstructions />;\n  }\n\n  const renderEmptyAttemptInstructions = () => {\n    let component = <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    if (examType === ExamType.PROCTORED && !prerequisitesPassed) {\n      component = <PrerequisitesProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    }\n    return component;\n  };\n\n  switch (true) {\n    case examType === ExamType.PROCTORED && skipProctoring:\n      return <SkipProctoredExamInstruction cancelSkipProctoredExam={toggleSkipProctoredExam} />;\n    case isEmpty(attempt) || !attempt.attempt_id:\n      return renderEmptyAttemptInstructions();\n    case attemptReadyToResume:\n      return <EntranceExamInstructions examType={examType} skipProctoredExam={toggleSkipProctoredExam} />;\n    case attemptStatus === ExamStatus.CREATED:\n      return <DownloadSoftwareProctoredExamInstructions skipProctoredExam={toggleSkipProctoredExam} />;\n    case attemptStatus === ExamStatus.DOWNLOAD_SOFTWARE_CLICKED:\n      return <DownloadSoftwareProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.READY_TO_START:\n      return <ReadyToStartProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.READY_TO_SUBMIT:\n      return <SubmitExamInstructions />;\n    case attemptStatus === ExamStatus.SUBMITTED:\n      // don't show submitted page for timed exam if exam has passed due date\n      // and in studio visibility option is set to 'show entire section'\n      // instead show exam content\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        return children;\n      }\n      return <SubmittedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.SECOND_REVIEW_REQUIRED:\n      return <SubmittedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.VERIFIED:\n      return <VerifiedExamInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.REJECTED:\n      return <RejectedInstructions examType={examType} />;\n    case attemptStatus === ExamStatus.ERROR:\n      return <ErrorExamInstructions examType={examType} />;\n    case examType === ExamType.PROCTORED && IS_ONBOARDING_ERROR(attemptStatus):\n      return <OnboardingErrorProctoredExamInstructions />;\n    case attemptStatus === ExamStatus.STARTED:\n      return children;\n    default:\n      return <UnknownAttemptStatusError />;\n  }\n};\n\nInstructions.propTypes = {\n  children: PropTypes.element.isRequired,\n};\n\nexport default Instructions;\n"],"mappings":"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"}