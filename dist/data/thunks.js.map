{"version":3,"file":"thunks.js","names":["handleAPIError","error","dispatch","message","detail","setApiError","errorMsg","EXAM_START_TIMEOUT_MILLISECONDS","updateAttemptAfter","courseId","sequenceId","promiseToBeResolvedFirst","noLoading","setIsLoading","isLoading","response","exam_attempt_id","fetchExamAttemptsData","attemptData","setExamState","exam","activeAttempt","isEmpty","active_attempt","getExamAttemptsData","getLatestAttemptData","fetchLatestAttempt","getProctoringSettings","getState","examState","id","logError","fetchProctoringSettings","course_id","proctoringSettings","setProctoringSettings","examRequiresAccessToken","getConfig","EXAMS_BASE_URL","fetchExamAccessToken","examAccessToken","setExamAccessToken","startTimedExam","content_id","createExamAttempt","use_legacy_attempt_api","createProctoredExamAttempt","startProctoredExam","attempt","workerUrl","desktop_application_js_url","useWorker","window","Worker","startExamTimeoutMilliseconds","workerPromiseForEventNames","actionToMessageTypesMap","start","external_id","then","continueAttempt","attempt_id","attemptId","attemptStatus","attempt_status","examId","skipProctoringExam","useLegacyAttemptApi","declineAttempt","pollAttempt","url","currentAttempt","ExamStatus","READY_TO_SUBMIT","pollExamAttempt","data","updatedAttempt","time_remaining_seconds","status","setActiveAttempt","SUBMITTED","expireExamAttempt","stopExam","examUrl","exam_url_path","useLegacyAttemptAPI","stopAttempt","location","href","continueExam","resetExam","resetAttempt","submitExam","attemptExternalId","handleBackendProviderSubmission","submit","submitAttempt","expireExam","pingAttempt","timeoutInSeconds","pingApplication","endExamWithFailure","startProctoringSoftwareDownload","softwareDownloadAttempt","getExamReviewPolicy","fetchExamReviewPolicy","setReviewPolicy","policy","review_policy","getAllowProctoringOptOut","allowProctoringOptOut","setAllowProctoringOptOut"],"sources":["../../src/data/thunks.js"],"sourcesContent":["import { logError } from '@edx/frontend-platform/logging';\nimport { getConfig } from '@edx/frontend-platform';\nimport {\n  fetchExamAttemptsData,\n  fetchLatestAttempt,\n  createExamAttempt,\n  stopAttempt,\n  continueAttempt,\n  submitAttempt,\n  pollExamAttempt,\n  fetchProctoringSettings,\n  softwareDownloadAttempt,\n  fetchExamReviewPolicy,\n  resetAttempt,\n  declineAttempt,\n  endExamWithFailure,\n  fetchExamAccessToken,\n} from './api';\nimport { isEmpty } from '../helpers';\nimport {\n  setIsLoading,\n  setExamState,\n  expireExamAttempt,\n  setActiveAttempt,\n  setProctoringSettings,\n  setExamAccessToken,\n  setReviewPolicy,\n  setApiError,\n  setAllowProctoringOptOut,\n} from './slice';\nimport { ExamStatus } from '../constants';\nimport { workerPromiseForEventNames, pingApplication } from './messages/handlers';\nimport actionToMessageTypesMap from './messages/constants';\n\nfunction handleAPIError(error, dispatch) {\n  const { message, detail } = error;\n  dispatch(setApiError({ errorMsg: message || detail }));\n}\n\nconst EXAM_START_TIMEOUT_MILLISECONDS = 5000;\n\n/**\n * Fetch attempt data and update exam state after performing another action if it is provided.\n * It is assumed that action somehow modifies attempt in the backend, that's why the state needs\n * to be updated.\n * @param courseId - id of a course\n * @param sequenceId - id of a sequence\n * @param promiseToBeResolvedFirst - a promise that should get resolved before fetching attempt data\n * @param noLoading - if set to false shows spinner while executing the function\n */\nfunction updateAttemptAfter(courseId, sequenceId, promiseToBeResolvedFirst = null, noLoading = false) {\n  return async (dispatch) => {\n    if (!noLoading) { dispatch(setIsLoading({ isLoading: true })); }\n    if (promiseToBeResolvedFirst) {\n      try {\n        const response = await promiseToBeResolvedFirst;\n        if (!response || !response.exam_attempt_id) {\n          if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n          return;\n        }\n      } catch (error) {\n        handleAPIError(error, dispatch);\n        if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n      }\n    }\n    try {\n      const attemptData = await fetchExamAttemptsData(courseId, sequenceId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      if (!noLoading) { dispatch(setIsLoading({ isLoading: false })); }\n    }\n  };\n}\n\nexport function getExamAttemptsData(courseId, sequenceId) {\n  return updateAttemptAfter(courseId, sequenceId);\n}\n\nexport function getLatestAttemptData(courseId) {\n  return async (dispatch) => {\n    dispatch(setIsLoading({ isLoading: true }));\n    try {\n      const attemptData = await fetchLatestAttempt(courseId);\n      dispatch(setExamState({\n        exam: attemptData.exam,\n        activeAttempt: !isEmpty(attemptData.active_attempt) ? attemptData.active_attempt : null,\n      }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    } finally {\n      dispatch(setIsLoading({ isLoading: false }));\n    }\n  };\n}\n\nexport function getProctoringSettings() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to get exam settings. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch proctoring settings. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const proctoringSettings = await fetchProctoringSettings(exam.course_id, exam.id);\n      dispatch(setProctoringSettings({ proctoringSettings }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function examRequiresAccessToken() {\n  return async (dispatch, getState) => {\n    if (!getConfig().EXAMS_BASE_URL) {\n      return;\n    }\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to get exam access token. No exam id.');\n      return;\n    }\n    try {\n      const examAccessToken = await fetchExamAccessToken(exam.id);\n      dispatch(setExamAccessToken({ examAccessToken }));\n    } catch (error) {\n      logError('Exam access token was not granted.');\n    }\n  };\n}\n\n/**\n * Start a timed exam\n */\nexport function startTimedExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to start exam. No exam id.');\n      handleAPIError(\n        { message: 'Failed to start exam. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id, exam.use_legacy_attempt_api),\n    )(dispatch);\n  };\n}\n\nexport function createProctoredExamAttempt() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to create exam attempt. No exam id.');\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, createExamAttempt(exam.id, exam.use_legacy_attempt_api, false, true),\n    )(dispatch);\n  };\n}\n\n/**\n * Start a proctored exam (including onboarding and practice exams)\n */\nexport function startProctoredExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const { attempt } = exam || {};\n    if (!exam.id) {\n      logError('Failed to start proctored exam. No exam id.');\n      return;\n    }\n    const { desktop_application_js_url: workerUrl } = attempt || {};\n    const useWorker = window.Worker && workerUrl;\n\n    if (useWorker) {\n      const startExamTimeoutMilliseconds = EXAM_START_TIMEOUT_MILLISECONDS;\n      workerPromiseForEventNames(actionToMessageTypesMap.start, exam.attempt.desktop_application_js_url)(\n        startExamTimeoutMilliseconds,\n        attempt.external_id,\n      ).then(() => updateAttemptAfter(\n        exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch))\n        .catch(error => {\n          const message = error?.message || 'Worker failed to respond.';\n          logError(\n            message,\n            {\n              attemptId: attempt.attempt_id,\n              attemptStatus: attempt.attempt_status,\n              courseId: attempt.course_id,\n              examId: exam.id,\n            },\n          );\n          handleAPIError(\n            { message: 'Something has gone wrong starting your exam. Please double-check that the application is running.' },\n            dispatch,\n          );\n        });\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, continueAttempt(attempt.attempt_id, attempt.use_legacy_attempt_api),\n      )(dispatch);\n    }\n  };\n}\n\nexport function skipProctoringExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to skip proctored exam. No exam id.');\n      return;\n    }\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptApi = exam.use_legacy_attempt_api;\n    if (attemptId) {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, declineAttempt(attemptId, useLegacyAttemptApi),\n      )(dispatch);\n    } else {\n      await updateAttemptAfter(\n        exam.course_id, exam.content_id, createExamAttempt(exam.id, true, false, useLegacyAttemptApi),\n      )(dispatch);\n    }\n  };\n}\n\n/**\n * Poll exam active attempt status.\n * @param url - poll attempt url\n */\nexport function pollAttempt(url) {\n  return async (dispatch, getState) => {\n    const currentAttempt = getState().examState.activeAttempt;\n\n    // If the learner is in a state where they've finished the exam\n    // and the attempt can be submitted (i.e. they are \"ready_to_submit\"),\n    // don't ping the proctoring app (which action could move\n    // the attempt into an error state).\n    if (currentAttempt && currentAttempt.attempt_status === ExamStatus.READY_TO_SUBMIT) {\n      return;\n    }\n\n    try {\n      const data = await pollExamAttempt(url);\n      const updatedAttempt = {\n        ...currentAttempt,\n        time_remaining_seconds: data.time_remaining_seconds,\n        attempt_status: data.status,\n      };\n      dispatch(setActiveAttempt({\n        activeAttempt: updatedAttempt,\n      }));\n      if (data.status === ExamStatus.SUBMITTED) {\n        dispatch(expireExamAttempt());\n      }\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function stopExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n\n    if (!activeAttempt) {\n      logError('Failed to stop exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to stop exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await stopAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, stopAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function continueExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to continue exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to continue exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, continueAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function resetExam() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to reset exam attempt. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to reset exam attempt. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, resetAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function submitExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const { desktop_application_js_url: workerUrl, external_id: attemptExternalId } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    const handleBackendProviderSubmission = () => {\n      // if a backend provider is being used during the exam\n      // send it a message that exam is being submitted\n      if (useWorker) {\n        workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n          .catch(() => handleAPIError(\n            { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n            dispatch,\n          ));\n      }\n    };\n\n    if (!activeAttempt) {\n      logError('Failed to submit exam. No active attempt.');\n      handleAPIError(\n        { message: 'Failed to submit exam. No active attempt was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    const {\n      attempt_id: attemptId,\n      exam_url_path: examUrl,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt;\n    if (!exam.attempt || attemptId !== exam.attempt.attempt_id) {\n      try {\n        await submitAttempt(attemptId, useLegacyAttemptAPI);\n        window.location.href = examUrl;\n        handleBackendProviderSubmission();\n      } catch (error) {\n        handleAPIError(error, dispatch);\n      }\n      return;\n    }\n\n    await updateAttemptAfter(exam.course_id, exam.content_id, submitAttempt(attemptId, useLegacyAttemptAPI))(dispatch);\n    handleBackendProviderSubmission();\n  };\n}\n\nexport function expireExam() {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    const {\n      desktop_application_js_url: workerUrl,\n      attempt_id: attemptId,\n      external_id: attemptExternalId,\n      use_legacy_attempt_api: useLegacyAttemptAPI,\n    } = activeAttempt || {};\n    const useWorker = window.Worker && activeAttempt && workerUrl;\n\n    if (!attemptId) {\n      logError('Failed to expire exam. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to expire exam. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n\n    // this sure looks like a bug\n    await updateAttemptAfter(\n      activeAttempt.course_id, exam.content_id, submitAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n    dispatch(expireExamAttempt());\n\n    if (useWorker) {\n      workerPromiseForEventNames(actionToMessageTypesMap.submit, workerUrl)(0, attemptExternalId)\n        .catch(() => handleAPIError(\n          { message: 'Something has gone wrong submitting your exam. Please double-check that the application is running.' },\n          dispatch,\n        ));\n    }\n  };\n}\n\n/**\n * Ping provider application (used for proctored exams).\n * @param timeoutInSeconds - time to wait for worker response before raising an error\n * @param workerUrl - location of the worker from the provider\n */\nexport function pingAttempt(timeoutInSeconds, workerUrl) {\n  return async (dispatch, getState) => {\n    const { exam, activeAttempt } = getState().examState;\n    await pingApplication(timeoutInSeconds, activeAttempt.external_id, workerUrl)\n      .catch(async (error) => {\n        const message = error?.message || 'Worker failed to respond.';\n        /**\n         * Note: The exam id logged here represents the current section being rendered.\n         * This may be different from the exam they are currently attempting\n         * if the learner has navigated to other course content during the exam.\n         * */\n        logError(\n          message,\n          {\n            attemptId: activeAttempt.attempt_id,\n            attemptStatus: activeAttempt.attempt_status,\n            courseId: activeAttempt.course_id,\n            examId: exam.id,\n          },\n        );\n        await updateAttemptAfter(\n          exam.course_id, exam.content_id, endExamWithFailure(activeAttempt.attempt_id, message),\n        )(dispatch);\n      });\n  };\n}\n\nexport function startProctoringSoftwareDownload() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    const attemptId = exam.attempt.attempt_id;\n    const useLegacyAttemptAPI = exam.attempt.use_legacy_attempt_api;\n    if (!attemptId) {\n      logError('Failed to start downloading proctoring software. No attempt id.');\n      handleAPIError(\n        { message: 'Failed to start downloading proctoring software. No attempt id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    await updateAttemptAfter(\n      exam.course_id, exam.content_id, softwareDownloadAttempt(attemptId, useLegacyAttemptAPI),\n    )(dispatch);\n  };\n}\n\nexport function getExamReviewPolicy() {\n  return async (dispatch, getState) => {\n    const { exam } = getState().examState;\n    if (!exam.id) {\n      logError('Failed to fetch exam review policy. No exam id.');\n      handleAPIError(\n        { message: 'Failed to fetch exam review policy. No exam id was found.' },\n        dispatch,\n      );\n      return;\n    }\n    try {\n      const data = await fetchExamReviewPolicy(exam.id);\n      dispatch(setReviewPolicy({ policy: data.review_policy }));\n    } catch (error) {\n      handleAPIError(error, dispatch);\n    }\n  };\n}\n\nexport function getAllowProctoringOptOut(allowProctoringOptOut) {\n  return (dispatch) => {\n    dispatch(setAllowProctoringOptOut({ allowProctoringOptOut }));\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAgBA;AACA;AAWA;AACA;AACA;AAA2D;AAAA;AAAA;AAAA;AAAA,+CA/B3D;AAAA;AAAA;AAiCA,SAASA,cAAc,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACvC,IAAQC,OAAO,GAAaF,KAAK,CAAzBE,OAAO;IAAEC,MAAM,GAAKH,KAAK,CAAhBG,MAAM;EACvBF,QAAQ,CAAC,IAAAG,kBAAW,EAAC;IAAEC,QAAQ,EAAEH,OAAO,IAAIC;EAAO,CAAC,CAAC,CAAC;AACxD;AAEA,IAAMG,+BAA+B,GAAG,IAAI;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,kBAAkB,CAACC,QAAQ,EAAEC,UAAU,EAAsD;EAAA,IAApDC,wBAAwB,uEAAG,IAAI;EAAA,IAAEC,SAAS,uEAAG,KAAK;EAClG;IAAA,sEAAO,iBAAOV,QAAQ;MAAA;MAAA;QAAA;UAAA;YACpB,IAAI,CAACU,SAAS,EAAE;cAAEV,QAAQ,CAAC,IAAAW,mBAAY,EAAC;gBAAEC,SAAS,EAAE;cAAK,CAAC,CAAC,CAAC;YAAE;YAAC,KAC5DH,wBAAwB;cAAA;cAAA;YAAA;YAAA;YAAA;YAAA,OAEDA,wBAAwB;UAAA;YAAzCI,QAAQ;YAAA,MACV,CAACA,QAAQ,IAAI,CAACA,QAAQ,CAACC,eAAe;cAAA;cAAA;YAAA;YACxC,IAAI,CAACJ,SAAS,EAAE;cAAEV,QAAQ,CAAC,IAAAW,mBAAY,EAAC;gBAAEC,SAAS,EAAE;cAAM,CAAC,CAAC,CAAC;YAAE;YAAC;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAInEd,cAAc,cAAQE,QAAQ,CAAC;YAC/B,IAAI,CAACU,SAAS,EAAE;cAAEV,QAAQ,CAAC,IAAAW,mBAAY,EAAC;gBAAEC,SAAS,EAAE;cAAM,CAAC,CAAC,CAAC;YAAE;UAAC;YAAA;YAAA;YAAA,OAIzC,IAAAG,0BAAqB,EAACR,QAAQ,EAAEC,UAAU,CAAC;UAAA;YAA/DQ,WAAW;YACjBhB,QAAQ,CAAC,IAAAiB,mBAAY,EAAC;cACpBC,IAAI,EAAEF,WAAW,CAACE,IAAI;cACtBC,aAAa,EAAE,CAAC,IAAAC,gBAAO,EAACJ,WAAW,CAACK,cAAc,CAAC,GAAGL,WAAW,CAACK,cAAc,GAAG;YACrF,CAAC,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAEJvB,cAAc,cAAQE,QAAQ,CAAC;UAAC;YAAA;YAEhC,IAAI,CAACU,SAAS,EAAE;cAAEV,QAAQ,CAAC,IAAAW,mBAAY,EAAC;gBAAEC,SAAS,EAAE;cAAM,CAAC,CAAC,CAAC;YAAE;YAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAEpE;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASU,mBAAmB,CAACf,QAAQ,EAAEC,UAAU,EAAE;EACxD,OAAOF,kBAAkB,CAACC,QAAQ,EAAEC,UAAU,CAAC;AACjD;AAEO,SAASe,oBAAoB,CAAChB,QAAQ,EAAE;EAC7C;IAAA,uEAAO,kBAAOP,QAAQ;MAAA;MAAA;QAAA;UAAA;YACpBA,QAAQ,CAAC,IAAAW,mBAAY,EAAC;cAAEC,SAAS,EAAE;YAAK,CAAC,CAAC,CAAC;YAAC;YAAA;YAAA,OAEhB,IAAAY,uBAAkB,EAACjB,QAAQ,CAAC;UAAA;YAAhDS,WAAW;YACjBhB,QAAQ,CAAC,IAAAiB,mBAAY,EAAC;cACpBC,IAAI,EAAEF,WAAW,CAACE,IAAI;cACtBC,aAAa,EAAE,CAAC,IAAAC,gBAAO,EAACJ,WAAW,CAACK,cAAc,CAAC,GAAGL,WAAW,CAACK,cAAc,GAAG;YACrF,CAAC,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAEJvB,cAAc,eAAQE,QAAQ,CAAC;UAAC;YAAA;YAEhCA,QAAQ,CAAC,IAAAW,mBAAY,EAAC;cAAEC,SAAS,EAAE;YAAM,CAAC,CAAC,CAAC;YAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAEhD;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASa,qBAAqB,GAAG;EACtC;IAAA,uEAAO,kBAAOzB,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,0CAA0C,CAAC;YACpD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAA6D,CAAC,EACzED,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA;YAAA,OAI+B,IAAA8B,4BAAuB,EAACZ,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACU,EAAE,CAAC;UAAA;YAA3EI,kBAAkB;YACxBhC,QAAQ,CAAC,IAAAiC,4BAAqB,EAAC;cAAED,kBAAkB,EAAlBA;YAAmB,CAAC,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAExDlC,cAAc,eAAQE,QAAQ,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAEnC;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASkC,uBAAuB,GAAG;EACxC;IAAA,uEAAO,kBAAOlC,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA,IACzB,IAAAS,2BAAS,GAAE,CAACC,cAAc;cAAA;cAAA;YAAA;YAAA;UAAA;YAGvBlB,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,8CAA8C,CAAC;YAAC;UAAA;YAAA;YAAA;YAAA,OAI3B,IAAAQ,yBAAoB,EAACnB,IAAI,CAACU,EAAE,CAAC;UAAA;YAArDU,eAAe;YACrBtC,QAAQ,CAAC,IAAAuC,yBAAkB,EAAC;cAAED,eAAe,EAAfA;YAAgB,CAAC,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAElD,IAAAT,iBAAQ,EAAC,oCAAoC,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAElD;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA;AACA;AACO,SAASW,cAAc,GAAG;EAC/B;IAAA,uEAAO,kBAAOxC,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,mCAAmC,CAAC;YAC7C/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAA8C,CAAC,EAC1DD,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA,OAGEM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAC,sBAAiB,EAACxB,IAAI,CAACU,EAAE,EAAEV,IAAI,CAACyB,sBAAsB,CAAC,CACzF,CAAC3C,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAAS4C,0BAA0B,GAAG;EAC3C;IAAA,uEAAO,kBAAO5C,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,4CAA4C,CAAC;YAAC;UAAA;YAAA;YAAA,OAGnDvB,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAC,sBAAiB,EAACxB,IAAI,CAACU,EAAE,EAAEV,IAAI,CAACyB,sBAAsB,EAAE,KAAK,EAAE,IAAI,CAAC,CACtG,CAAC3C,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA;AACA;AACO,SAAS6C,kBAAkB,GAAG;EACnC;IAAA,uEAAO,kBAAO7C,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,QACQA,IAAI,IAAI,CAAC,CAAC,EAAtB4B,OAAO,SAAPA,OAAO;YAAA,IACV5B,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,6CAA6C,CAAC;YAAC;UAAA;YAAA,QAGRiB,OAAO,IAAI,CAAC,CAAC,EAA3BC,SAAS,SAArCC,0BAA0B;YAC5BC,SAAS,GAAGC,MAAM,CAACC,MAAM,IAAIJ,SAAS;YAAA,KAExCE,SAAS;cAAA;cAAA;YAAA;YACLG,4BAA4B,GAAG/C,+BAA+B;YACpE,IAAAgD,oCAA0B,EAACC,sBAAuB,CAACC,KAAK,EAAErC,IAAI,CAAC4B,OAAO,CAACE,0BAA0B,CAAC,CAChGI,4BAA4B,EAC5BN,OAAO,CAACU,WAAW,CACpB,CAACC,IAAI,CAAC;cAAA,OAAMnD,kBAAkB,CAC7BY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAiB,oBAAe,EAACZ,OAAO,CAACa,UAAU,EAAEb,OAAO,CAACH,sBAAsB,CAAC,CACrG,CAAC3C,QAAQ,CAAC;YAAA,EAAC,SACJ,CAAC,UAAAD,KAAK,EAAI;cACd,IAAME,OAAO,GAAG,CAAAF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,OAAO,KAAI,2BAA2B;cAC7D,IAAA4B,iBAAQ,EACN5B,OAAO,EACP;gBACE2D,SAAS,EAAEd,OAAO,CAACa,UAAU;gBAC7BE,aAAa,EAAEf,OAAO,CAACgB,cAAc;gBACrCvD,QAAQ,EAAEuC,OAAO,CAACf,SAAS;gBAC3BgC,MAAM,EAAE7C,IAAI,CAACU;cACf,CAAC,CACF;cACD9B,cAAc,CACZ;gBAAEG,OAAO,EAAE;cAAoG,CAAC,EAChHD,QAAQ,CACT;YACH,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA,OAECM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAiB,oBAAe,EAACZ,OAAO,CAACa,UAAU,EAAEb,OAAO,CAACH,sBAAsB,CAAC,CACrG,CAAC3C,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAEd;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASgE,kBAAkB,GAAG;EACnC;IAAA,wEAAO,kBAAOhE,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,4CAA4C,CAAC;YAAC;UAAA;YAGnD+B,SAAS,GAAG1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;YACnCM,mBAAmB,GAAG/C,IAAI,CAACyB,sBAAsB;YAAA,KACnDiB,SAAS;cAAA;cAAA;YAAA;YAAA;YAAA,OACLtD,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAyB,mBAAc,EAACN,SAAS,EAAEK,mBAAmB,CAAC,CAChF,CAACjE,QAAQ,CAAC;UAAA;YAAA;YAAA;UAAA;YAAA;YAAA,OAELM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAC,sBAAiB,EAACxB,IAAI,CAACU,EAAE,EAAE,IAAI,EAAE,KAAK,EAAEqC,mBAAmB,CAAC,CAC9F,CAACjE,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CAEd;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASmE,WAAW,CAACC,GAAG,EAAE;EAC/B;IAAA,wEAAO,kBAAOpE,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACxB2C,cAAc,GAAG3C,QAAQ,EAAE,CAACC,SAAS,CAACR,aAAa,EAEzD;YACA;YACA;YACA;YAAA,MACIkD,cAAc,IAAIA,cAAc,CAACP,cAAc,KAAKQ,qBAAU,CAACC,eAAe;cAAA;cAAA;YAAA;YAAA;UAAA;YAAA;YAAA;YAAA,OAK7D,IAAAC,oBAAe,EAACJ,GAAG,CAAC;UAAA;YAAjCK,IAAI;YACJC,cAAc,mCACfL,cAAc;cACjBM,sBAAsB,EAAEF,IAAI,CAACE,sBAAsB;cACnDb,cAAc,EAAEW,IAAI,CAACG;YAAM;YAE7B5E,QAAQ,CAAC,IAAA6E,uBAAgB,EAAC;cACxB1D,aAAa,EAAEuD;YACjB,CAAC,CAAC,CAAC;YACH,IAAID,IAAI,CAACG,MAAM,KAAKN,qBAAU,CAACQ,SAAS,EAAE;cACxC9E,QAAQ,CAAC,IAAA+E,wBAAiB,GAAE,CAAC;YAC/B;YAAC;YAAA;UAAA;YAAA;YAAA;YAEDjF,cAAc,eAAQE,QAAQ,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAEnC;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASgF,QAAQ,GAAG;EACzB;IAAA,wEAAO,mBAAOhF,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA,sBACEA,QAAQ,EAAE,CAACC,SAAS,EAA5CT,IAAI,uBAAJA,IAAI,EAAEC,aAAa,uBAAbA,aAAa;YAAA,IAEtBA,aAAa;cAAA;cAAA;YAAA;YAChB,IAAAU,iBAAQ,EAAC,yCAAyC,CAAC;YACnD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAAoD,CAAC,EAChED,QAAQ,CACT;YAAC;UAAA;YAKU4D,SAAS,GAGnBzC,aAAa,CAHfwC,UAAU,EACKsB,OAAO,GAEpB9D,aAAa,CAFf+D,aAAa,EACWC,mBAAmB,GACzChE,aAAa,CADfwB,sBAAsB;YAAA,MAEpB,CAACzB,IAAI,CAAC4B,OAAO,IAAIc,SAAS,KAAK1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;cAAA;cAAA;YAAA;YAAA;YAAA;YAAA,OAEhD,IAAAyB,gBAAW,EAACxB,SAAS,EAAEuB,mBAAmB,CAAC;UAAA;YACjDjC,MAAM,CAACmC,QAAQ,CAACC,IAAI,GAAGL,OAAO;YAAC;YAAA;UAAA;YAAA;YAAA;YAE/BnF,cAAc,gBAAQE,QAAQ,CAAC;UAAC;YAAA;UAAA;YAAA;YAAA,OAK9BM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAA2C,gBAAW,EAACxB,SAAS,EAAEuB,mBAAmB,CAAC,CAC7E,CAACnF,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASuF,YAAY,GAAG;EAC7B;IAAA,wEAAO,mBAAOvF,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YACN0C,SAAS,GAAG1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;YACnCwB,mBAAmB,GAAGjE,IAAI,CAAC4B,OAAO,CAACH,sBAAsB;YAAA,IAC1DiB,SAAS;cAAA;cAAA;YAAA;YACZ,IAAA/B,iBAAQ,EAAC,yCAAyC,CAAC;YACnD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAAoD,CAAC,EAChED,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA,OAGEM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAiB,oBAAe,EAACE,SAAS,EAAEuB,mBAAmB,CAAC,CACjF,CAACnF,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASwF,SAAS,GAAG;EAC1B;IAAA,wEAAO,mBAAOxF,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YACN0C,SAAS,GAAG1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;YACnCwB,mBAAmB,GAAGjE,IAAI,CAAC4B,OAAO,CAACH,sBAAsB;YAAA,IAC1DiB,SAAS;cAAA;cAAA;YAAA;YACZ,IAAA/B,iBAAQ,EAAC,8CAA8C,CAAC;YACxD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAAyD,CAAC,EACrED,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA,OAGEM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAgD,iBAAY,EAAC7B,SAAS,EAAEuB,mBAAmB,CAAC,CAC9E,CAACnF,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAAS0F,UAAU,GAAG;EAC3B;IAAA,wEAAO,mBAAO1F,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA,uBACEA,QAAQ,EAAE,CAACC,SAAS,EAA5CT,IAAI,wBAAJA,IAAI,EAAEC,aAAa,wBAAbA,aAAa;YAAA,SACuDA,aAAa,IAAI,CAAC,CAAC,EAAjE4B,SAAS,UAArCC,0BAA0B,EAA0B2C,iBAAiB,UAA9BnC,WAAW;YACpDP,SAAS,GAAGC,MAAM,CAACC,MAAM,IAAIhC,aAAa,IAAI4B,SAAS;YAEvD6C,+BAA+B,GAAG,SAAlCA,+BAA+B,GAAS;cAC5C;cACA;cACA,IAAI3C,SAAS,EAAE;gBACb,IAAAI,oCAA0B,EAACC,sBAAuB,CAACuC,MAAM,EAAE9C,SAAS,CAAC,CAAC,CAAC,EAAE4C,iBAAiB,CAAC,SACnF,CAAC;kBAAA,OAAM7F,cAAc,CACzB;oBAAEG,OAAO,EAAE;kBAAsG,CAAC,EAClHD,QAAQ,CACT;gBAAA,EAAC;cACN;YACF,CAAC;YAAA,IAEImB,aAAa;cAAA;cAAA;YAAA;YAChB,IAAAU,iBAAQ,EAAC,2CAA2C,CAAC;YACrD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAAsD,CAAC,EAClED,QAAQ,CACT;YAAC;UAAA;YAKU4D,SAAS,GAGnBzC,aAAa,CAHfwC,UAAU,EACKsB,OAAO,GAEpB9D,aAAa,CAFf+D,aAAa,EACWC,mBAAmB,GACzChE,aAAa,CADfwB,sBAAsB;YAAA,MAEpB,CAACzB,IAAI,CAAC4B,OAAO,IAAIc,SAAS,KAAK1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;cAAA;cAAA;YAAA;YAAA;YAAA;YAAA,OAEhD,IAAAmC,kBAAa,EAAClC,SAAS,EAAEuB,mBAAmB,CAAC;UAAA;YACnDjC,MAAM,CAACmC,QAAQ,CAACC,IAAI,GAAGL,OAAO;YAC9BW,+BAA+B,EAAE;YAAC;YAAA;UAAA;YAAA;YAAA;YAElC9F,cAAc,gBAAQE,QAAQ,CAAC;UAAC;YAAA;UAAA;YAAA;YAAA,OAK9BM,kBAAkB,CAACY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAqD,kBAAa,EAAClC,SAAS,EAAEuB,mBAAmB,CAAC,CAAC,CAACnF,QAAQ,CAAC;UAAA;YAClH4F,+BAA+B,EAAE;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACnC;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASG,UAAU,GAAG;EAC3B;IAAA,wEAAO,mBAAO/F,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA,uBACEA,QAAQ,EAAE,CAACC,SAAS,EAA5CT,IAAI,wBAAJA,IAAI,EAAEC,aAAa,wBAAbA,aAAa;YAAA,SAMvBA,aAAa,IAAI,CAAC,CAAC,EAJO4B,SAAS,UAArCC,0BAA0B,EACdY,SAAS,UAArBD,UAAU,EACGgC,iBAAiB,UAA9BnC,WAAW,EACa2B,mBAAmB,UAA3CxC,sBAAsB;YAElBM,SAAS,GAAGC,MAAM,CAACC,MAAM,IAAIhC,aAAa,IAAI4B,SAAS;YAAA,IAExDa,SAAS;cAAA;cAAA;YAAA;YACZ,IAAA/B,iBAAQ,EAAC,uCAAuC,CAAC;YACjD/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAAkD,CAAC,EAC9DD,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA,OAKEM,kBAAkB,CACtBa,aAAa,CAACY,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAAqD,kBAAa,EAAClC,SAAS,EAAEuB,mBAAmB,CAAC,CACxF,CAACnF,QAAQ,CAAC;UAAA;YACXA,QAAQ,CAAC,IAAA+E,wBAAiB,GAAE,CAAC;YAE7B,IAAI9B,SAAS,EAAE;cACb,IAAAI,oCAA0B,EAACC,sBAAuB,CAACuC,MAAM,EAAE9C,SAAS,CAAC,CAAC,CAAC,EAAE4C,iBAAiB,CAAC,SACnF,CAAC;gBAAA,OAAM7F,cAAc,CACzB;kBAAEG,OAAO,EAAE;gBAAsG,CAAC,EAClHD,QAAQ,CACT;cAAA,EAAC;YACN;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CACF;IAAA;MAAA;IAAA;EAAA;AACH;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASgG,WAAW,CAACC,gBAAgB,EAAElD,SAAS,EAAE;EACvD;IAAA,wEAAO,mBAAO/C,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YAAA,uBACEA,QAAQ,EAAE,CAACC,SAAS,EAA5CT,IAAI,wBAAJA,IAAI,EAAEC,aAAa,wBAAbA,aAAa;YAAA;YAAA,OACrB,IAAA+E,yBAAe,EAACD,gBAAgB,EAAE9E,aAAa,CAACqC,WAAW,EAAET,SAAS,CAAC,SACrE;cAAA,wEAAC,mBAAOhD,KAAK;gBAAA;gBAAA;kBAAA;oBAAA;sBACXE,OAAO,GAAG,CAAAF,KAAK,aAALA,KAAK,uBAALA,KAAK,CAAEE,OAAO,KAAI,2BAA2B,EAC7D;AACR;AACA;AACA;AACA;sBACQ,IAAA4B,iBAAQ,EACN5B,OAAO,EACP;wBACE2D,SAAS,EAAEzC,aAAa,CAACwC,UAAU;wBACnCE,aAAa,EAAE1C,aAAa,CAAC2C,cAAc;wBAC3CvD,QAAQ,EAAEY,aAAa,CAACY,SAAS;wBACjCgC,MAAM,EAAE7C,IAAI,CAACU;sBACf,CAAC,CACF;sBAAC;sBAAA,OACItB,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAA0D,uBAAkB,EAAChF,aAAa,CAACwC,UAAU,EAAE1D,OAAO,CAAC,CACvF,CAACD,QAAQ,CAAC;oBAAA;oBAAA;sBAAA;kBAAA;gBAAA;cAAA,CACZ;cAAA;gBAAA;cAAA;YAAA,IAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACL;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASoG,+BAA+B,GAAG;EAChD;IAAA,wEAAO,mBAAOpG,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YACN0C,SAAS,GAAG1C,IAAI,CAAC4B,OAAO,CAACa,UAAU;YACnCwB,mBAAmB,GAAGjE,IAAI,CAAC4B,OAAO,CAACH,sBAAsB;YAAA,IAC1DiB,SAAS;cAAA;cAAA;YAAA;YACZ,IAAA/B,iBAAQ,EAAC,iEAAiE,CAAC;YAC3E/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAA4E,CAAC,EACxFD,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA,OAGEM,kBAAkB,CACtBY,IAAI,CAACa,SAAS,EAAEb,IAAI,CAACuB,UAAU,EAAE,IAAA4D,4BAAuB,EAACzC,SAAS,EAAEuB,mBAAmB,CAAC,CACzF,CAACnF,QAAQ,CAAC;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA,CACZ;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAASsG,mBAAmB,GAAG;EACpC;IAAA,wEAAO,mBAAOtG,QAAQ,EAAE0B,QAAQ;MAAA;MAAA;QAAA;UAAA;YACtBR,IAAI,GAAKQ,QAAQ,EAAE,CAACC,SAAS,CAA7BT,IAAI;YAAA,IACPA,IAAI,CAACU,EAAE;cAAA;cAAA;YAAA;YACV,IAAAC,iBAAQ,EAAC,iDAAiD,CAAC;YAC3D/B,cAAc,CACZ;cAAEG,OAAO,EAAE;YAA4D,CAAC,EACxED,QAAQ,CACT;YAAC;UAAA;YAAA;YAAA;YAAA,OAIiB,IAAAuG,0BAAqB,EAACrF,IAAI,CAACU,EAAE,CAAC;UAAA;YAA3C6C,IAAI;YACVzE,QAAQ,CAAC,IAAAwG,sBAAe,EAAC;cAAEC,MAAM,EAAEhC,IAAI,CAACiC;YAAc,CAAC,CAAC,CAAC;YAAC;YAAA;UAAA;YAAA;YAAA;YAE1D5G,cAAc,gBAAQE,QAAQ,CAAC;UAAC;UAAA;YAAA;QAAA;MAAA;IAAA,CAEnC;IAAA;MAAA;IAAA;EAAA;AACH;AAEO,SAAS2G,wBAAwB,CAACC,qBAAqB,EAAE;EAC9D,OAAO,UAAC5G,QAAQ,EAAK;IACnBA,QAAQ,CAAC,IAAA6G,+BAAwB,EAAC;MAAED,qBAAqB,EAArBA;IAAsB,CAAC,CAAC,CAAC;EAC/D,CAAC;AACH"}