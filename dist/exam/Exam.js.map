{"version":3,"file":"Exam.js","names":["Exam","isGated","isTimeLimited","originalUserIsStaff","canAccessProctoredExams","children","intl","state","useContext","ExamStateContext","isLoading","activeAttempt","showTimer","stopExam","exam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getProctoringSettings","submitExam","attempt","examType","type","examId","id","passedDueDate","passed_due_date","hideAfterDue","hide_after_due","attemptStatus","attempt_status","shouldShowMasqueradeAlert","ExamType","TIMED","ExamStatus","STARTED","useState","hasProctoredExamAccess","setHasProctoredExamAccess","proctoredExamTypes","ONBOARDING","PRACTICE","PROCTORED","useEffect","includes","formatMessage","messages","proctoredExamAccessDenied","sequenceContent","Info","propTypes","PropTypes","bool","isRequired","element","intlShape","defaultProps","injectIntl"],"sources":["../../src/exam/Exam.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { injectIntl, intlShape, FormattedMessage } from '@edx/frontend-platform/i18n';\nimport { Alert, Spinner } from '@edx/paragon';\nimport { Info } from '@edx/paragon/icons';\nimport { ExamTimerBlock } from '../timer';\nimport Instructions from '../instructions';\nimport ExamStateContext from '../context';\nimport ExamAPIError from './ExamAPIError';\nimport { ExamStatus, ExamType } from '../constants';\nimport messages from './messages';\n\n/**\n * Exam component is intended to render exam instructions before and after exam.\n * It is also responsible for rendering exam timer block/component during the exam.\n * If children do not relate to exam sequence, render them directly.\n * @param isTimeLimited - boolean used to identify if we need to process sequence as an exam\n * @param children - sequence content\n * @returns {JSX.Element}\n * @constructor\n */\nconst Exam = ({\n  isGated, isTimeLimited, originalUserIsStaff, canAccessProctoredExams, children, intl,\n}) => {\n  const state = useContext(ExamStateContext);\n  const {\n    isLoading, activeAttempt, showTimer, stopExam, exam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getProctoringSettings, submitExam,\n  } = state;\n\n  const {\n    attempt,\n    type: examType,\n    id: examId,\n    passed_due_date: passedDueDate,\n    hide_after_due: hideAfterDue,\n  } = exam || {};\n  const { attempt_status: attemptStatus } = attempt || {};\n\n  const shouldShowMasqueradeAlert = () => {\n    // if course staff is masquerading as a specific learner, they should be able\n    // to view the exam content regardless of the learner's current state\n    if (originalUserIsStaff && isTimeLimited) {\n      if (examType === ExamType.TIMED && passedDueDate && !hideAfterDue) {\n        // if the learner is able to view exam content after the due date is passed,\n        // don't show this alert\n        return false;\n      }\n      return attemptStatus !== ExamStatus.STARTED;\n    }\n    return false;\n  };\n\n  const [hasProctoredExamAccess, setHasProctoredExamAccess] = useState(true);\n\n  const proctoredExamTypes = [ExamType.ONBOARDING, ExamType.PRACTICE, ExamType.PROCTORED];\n\n  useEffect(() => {\n    if (proctoredExamTypes.includes(examType)) {\n      // only fetch proctoring settings for a proctored exam\n      if (examId) {\n        getProctoringSettings();\n      }\n\n      // Only exclude Timed Exam when restricting access to exams\n      setHasProctoredExamAccess(canAccessProctoredExams);\n    }\n    // this makes sure useEffect gets called only one time after the exam has been fetched\n    // we can't leave this empty since initially exam is just an empty object, so\n    // API calls above would not get triggered\n  }, [examId]);\n\n  if (isLoading) {\n    return (\n      <div data-testid=\"spinner\" className=\"d-flex justify-content-center align-items-center flex-column my-5 py-5\">\n        <Spinner animation=\"border\" variant=\"primary\" />\n      </div>\n    );\n  }\n\n  if (!hasProctoredExamAccess) {\n    // If the user cannot acces proctoring exam, and the current exam is a proctoring exam,\n    // we want to display a message box to let learner know they have no access.\n    return (\n      <div data-testid=\"no-access\" className=\"d-flex justify-content-center align-items-center flex-column\">\n        {intl.formatMessage(messages.proctoredExamAccessDenied)}\n      </div>\n    );\n  }\n\n  const sequenceContent = <>{children}</>;\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {shouldShowMasqueradeAlert() && (\n        <Alert variant=\"info\" icon={Info} data-testid=\"masquerade-alert\">\n          <FormattedMessage\n            id=\"exam.hiddenContent\"\n            defaultMessage=\"This exam is hidden from the learner.\"\n          />\n        </Alert>\n      )}\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      { // show the error message only if you are in the exam sequence\n        isTimeLimited && apiErrorMsg && <ExamAPIError />\n      }\n      {isTimeLimited && !originalUserIsStaff && !isGated\n        ? <Instructions>{sequenceContent}</Instructions>\n        : sequenceContent}\n    </div>\n  );\n};\n\nExam.propTypes = {\n  isTimeLimited: PropTypes.bool.isRequired,\n  isGated: PropTypes.bool.isRequired,\n  originalUserIsStaff: PropTypes.bool.isRequired,\n  canAccessProctoredExams: PropTypes.bool,\n  children: PropTypes.element.isRequired,\n  intl: intlShape.isRequired,\n};\n\nExam.defaultProps = {\n  canAccessProctoredExams: true,\n};\n\nexport default injectIntl(Exam);\n"],"mappings":"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"}