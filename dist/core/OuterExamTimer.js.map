{"version":3,"file":"OuterExamTimer.js","names":["ExamTimer","courseId","state","useContext","ExamStateContext","AppContext","authenticatedUser","activeAttempt","showTimer","stopExam","submitExam","expireExam","pollAttempt","apiErrorMsg","pingAttempt","getLatestAttemptData","useEffect","propTypes","PropTypes","string","isRequired","OuterExamTimer"],"sources":["../../src/core/OuterExamTimer.jsx"],"sourcesContent":["import React, { useEffect, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { AppContext } from '@edx/frontend-platform/react';\nimport ExamStateContext from '../context';\nimport { ExamTimerBlock } from '../timer';\nimport ExamAPIError from '../exam/ExamAPIError';\nimport ExamStateProvider from './ExamStateProvider';\n\nconst ExamTimer = ({ courseId }) => {\n  const state = useContext(ExamStateContext);\n  const { authenticatedUser } = useContext(AppContext);\n  const {\n    activeAttempt, showTimer, stopExam, submitExam,\n    expireExam, pollAttempt, apiErrorMsg, pingAttempt,\n    getLatestAttemptData,\n  } = state;\n\n  // if user is not authenticated they cannot have active exam, so no need for timer\n  // (also exam API would return 403 error)\n  if (!authenticatedUser) {\n    return null;\n  }\n\n  useEffect(() => {\n    getLatestAttemptData(courseId);\n  }, [courseId]);\n\n  return (\n    <div className=\"d-flex flex-column justify-content-center\">\n      {showTimer && (\n        <ExamTimerBlock\n          attempt={activeAttempt}\n          stopExamAttempt={stopExam}\n          submitExam={submitExam}\n          expireExamAttempt={expireExam}\n          pollExamAttempt={pollAttempt}\n          pingAttempt={pingAttempt}\n        />\n      )}\n      {apiErrorMsg && <ExamAPIError />}\n    </div>\n  );\n};\n\nExamTimer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\n/**\n * OuterExamTimer is the component responsible for showing exam timer on non-sequence pages.\n * @param courseId - Id of a course that is checked for active exams, if there is one the timer\n * will be shown.\n */\nconst OuterExamTimer = ({ courseId }) => (\n  <ExamStateProvider>\n    <ExamTimer courseId={courseId} />\n  </ExamStateProvider>\n);\n\nOuterExamTimer.propTypes = {\n  courseId: PropTypes.string.isRequired,\n};\n\nexport default OuterExamTimer;\n"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAoD;AAAA;AAAA;AAEpD,IAAMA,SAAS,GAAG,SAAZA,SAAS,OAAqB;EAAA,IAAfC,QAAQ,QAARA,QAAQ;EAC3B,IAAMC,KAAK,GAAG,IAAAC,iBAAU,EAACC,mBAAgB,CAAC;EAC1C,kBAA8B,IAAAD,iBAAU,EAACE,kBAAU,CAAC;IAA5CC,iBAAiB,eAAjBA,iBAAiB;EACzB,IACEC,aAAa,GAGXL,KAAK,CAHPK,aAAa;IAAEC,SAAS,GAGtBN,KAAK,CAHQM,SAAS;IAAEC,QAAQ,GAGhCP,KAAK,CAHmBO,QAAQ;IAAEC,UAAU,GAG5CR,KAAK,CAH6BQ,UAAU;IAC9CC,UAAU,GAERT,KAAK,CAFPS,UAAU;IAAEC,WAAW,GAErBV,KAAK,CAFKU,WAAW;IAAEC,WAAW,GAElCX,KAAK,CAFkBW,WAAW;IAAEC,WAAW,GAE/CZ,KAAK,CAF+BY,WAAW;IACjDC,oBAAoB,GAClBb,KAAK,CADPa,oBAAoB;;EAGtB;EACA;EACA,IAAI,CAACT,iBAAiB,EAAE;IACtB,OAAO,IAAI;EACb;EAEA,IAAAU,gBAAS,EAAC,YAAM;IACdD,oBAAoB,CAACd,QAAQ,CAAC;EAChC,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,oBACE;IAAK,SAAS,EAAC;EAA2C,GACvDO,SAAS,iBACR,gCAAC,qBAAc;IACb,OAAO,EAAED,aAAc;IACvB,eAAe,EAAEE,QAAS;IAC1B,UAAU,EAAEC,UAAW;IACvB,iBAAiB,EAAEC,UAAW;IAC9B,eAAe,EAAEC,WAAY;IAC7B,WAAW,EAAEE;EAAY,EAE5B,EACAD,WAAW,iBAAI,gCAAC,wBAAY,OAAG,CAC5B;AAEV,CAAC;AAEDb,SAAS,CAACiB,SAAS,GAAG;EACpBhB,QAAQ,EAAEiB,qBAAS,CAACC,MAAM,CAACC;AAC7B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAc;EAAA,IAAMpB,QAAQ,SAARA,QAAQ;EAAA,oBAChC,gCAAC,6BAAiB,qBAChB,gCAAC,SAAS;IAAC,QAAQ,EAAEA;EAAS,EAAG,CACf;AAAA,CACrB;AAEDoB,cAAc,CAACJ,SAAS,GAAG;EACzBhB,QAAQ,EAAEiB,qBAAS,CAACC,MAAM,CAACC;AAC7B,CAAC;AAAC,eAEaC,cAAc;AAAA"}